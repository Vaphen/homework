/*
 * configFileParser.cpp
 *
 *  Created on: 29.01.2015
 *      Author: john
 */

#include "ConfigFileParser.h"

#include "../constants/constants.h"
#include <fstream>
#include <iostream>
#include <string>
#include <map>


ConfigFileParser::ConfigFileParser() :
		pathToConfigFile("./" + std::string(PROGRAM_NAME) + ".conf") {

	// should be just called if the file doesn't already exist
	//createConfigFile();

	try {
		loadConfigs();
	}catch(CONFIG_ERRORS& error){
		throw error;
	}
}

ConfigFileParser::~ConfigFileParser() {

}

void ConfigFileParser::createConfigFile() {
	writeConfigFile.open(pathToConfigFile);
	if(!writeConfigFile.is_open()) throw CONFIG_ERRORS::ERROR_FILE_NOT_CREATABLE;
	writeConfigFile << "# This is an autogenerated file\n";
	writeConfigFile << "# DO NOT EDIT!!!\n";
	writeConfigFile << "\n\n";
	writeConfigFile << "# Path to the directory where all exercises were saved\n";
	writeConfigFile << "SAVE_DIRECTORY_PATH=" << "./\n";
	writeConfigFile.close();
}

/// Loads all settings from the settings file to the configurations map.
/**
 * This function is called by constructor and prepares the map for the getters
 * @throws CONFIG_ERRORS::ERROR_UNKOWN_PARAMETER if the configfile was bad
 */
void ConfigFileParser::loadConfigs() {
	readConfigFile.open(pathToConfigFile);

	for(std::string line = ""; std::getline(readConfigFile, line); ) {
		if(line.empty() || line.at(0) == '#') { continue; }
		if(line.find(ConfigParams::SAVE_DIR_PATH_TEXT) == 0) {
			configurations.at(ConfigParams::SAVE_DIRECTORY_PATH) = line.substr(ConfigParams::SAVE_DIR_PATH_TEXT.length(), line.length());
		}else{
			try {
			// the config file is not valid; overwrite it with a new, correct one
				createConfigFile();
			}catch(CONFIG_ERRORS &error) {
				throw CONFIG_ERRORS::ERROR_FILE_NOT_CREATABLE;
			}
			throw CONFIG_ERRORS::ERROR_UNKNOWN_PARAMETER;
		}
	}
	readConfigFile.close();
}

const std::string ConfigFileParser::getSaveDirectoryPath() const {
	return configurations.at(ConfigParams::SAVE_DIRECTORY_PATH);
}
